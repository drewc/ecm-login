#+TITLE: ECM User: User and Login for a webapp

Backwards compatible!


* Main Binary

#+begin_src scheme :tangle login.ss
  (import ./login/handler ./login/conf :std/getopt)
  (export main)

  (def (main . args)
    (call-with-getopt ecm-login-main args
      program: "login"
      help: "A simple httpd login server"
      (option 'address "-a" "--address"
        help: "server address"
        default: "127.0.0.1:8080")))

  (def (ecm-login-main opt)
    (run (hash-ref opt 'address)))

  (def (run address)
    (update-conf)
    (set! login-server (run-login-server address))
    (thread-join! login-server))

#+end_src

* Build

#+begin_src scheme :tangle ./build.ss :shebang #!/usr/bin/env gxi
    ;; -*- Gerbil -*-

    (import :std/build-script)

    (defbuild-script
      '("login/conf"
        "login/database"
        "login/types"
        "login/api"
        "login/handler"
         (exe: "login")
  ))
#+end_src

* Package

#+begin_src scheme :tangle gerbil.pkg
   (package: ecm
    depend: ("github.com/drewc/ftw"))

#+end_src
* http handler

#+begin_src scheme :tangle ./login/handler.ss
  (import :std/net/httpd :std/misc/ports
  	:std/db/postgresql :std/db/dbi
  	:std/net/uri :std/text/utf8

  	:drewc/ftw/httpd/cookies)
  (import ./api)
  (export #t)

  (def current-static-path (make-parameter "/opt/ecm/user/static/"))
  (def static-path-expand (cut path-expand <> (current-static-path)))


  ;(def dbg #f)

  (def (login/POST req res)
    (let* ((params (form-url-decode (utf8->string (http-request-body req))))
  	 (u (assget "u" params))
  	 (pw (assget "p" params))
  	 (keep (assget "keep" params))
  	 (login (login-user u pw))
  	 (getps (let ((ps (http-request-params req)))
  		  (if ps (form-url-decode ps) [])))
  	 (q (or (assget "q" getps) "/ecm/index")))
      (if login 
        (http-response-write
  	res 200 `(("Content-Type" . "text/html")
  		  ("Set-Cookie" . ,(string-append "ecm-login=" (login-id login))))
  	 (string-append "<!DOCTYPE html>
   <html><head><meta http-equiv=\"refresh\" content=\"0; url='"q"'\">
   </head><body></body> </html>"))
        
        (http-response-write res 302 `(("Location" . ,(string-append "/ecm/login?_f&q=" q))) #f))))

  (def (login-handler req res)
    ;;(set! dbg req)
    (if (equal? 'POST (http-request-method req))
      (login/POST req res)
    (http-response-file
     res '(("Content-Type" . "text/html"))
     (static-path-expand "login-dark.html"))))

  (def (login.js req res)
    (http-response-file
     res '(("Content-Type" . "text/javascript"))
     (static-path-expand "login.js")))


  (def login-mux
    (make-static-http-mux
     (list->hash-table
      `(("/ecm/login" .,(cut login-handler <> <>))
        ("/ecm/login/login.js" .,(cut login.js <> <>))))
     (cut login-handler <> <>)))

  (def (run-login-server (address "10.42.1.100:8080"))
    (start-http-server! address mux: login-mux))


  (def login-server #f)
#+end_src

* The API

#+begin_src scheme :tangle ./login/api.ss
  (import ./types ./database)
  (export #t (import: ./types))

  (def (login-user username password)
    (def tbl (authenticate username password))
    (if (not tbl) tbl
        (make-login
         (hash-ref tbl 'id)
         (hash-ref tbl 'user_id) username
         (hash-ref tbl 'time) (hash-ref tbl 'until))))
#+end_src


* The JavaScript

#+begin_src js :tangle ./static/login.js
  const ready = fn => document.readyState !== 'loading' ? fn() : document.addEventListener('DOMContentLoaded', fn);

  ready(function() {
  //     const form = document.getElementById("loginForm");
  //     form.addEventListener("submit", function (event) {
  // 	// event.preventDefault();
  // 	login_user()
  //     })

     const failure = new URLSearchParams(window.location.search).get("_f")
     if (typeof failure == "string") {
       document.getElementById("Invalid").style.display = "block"
     }
   })

  function login_user ( form_id = "loginForm") {
    alert('Login' + form_id)
  }
#+end_src
* The "login" struct

#+begin_src scheme tangle ./login/types.ss
    (export #t (struct-out login))
    (defstruct login (id user-id username effective expiry)
      transparent: #t)
#+end_src

* Database

#+begin_src scheme :tangle login/database.ss 
  (import ./conf :std/text/json :std/db/dbi :std/db/postgresql)
  (export #t)

  (def (database-connect)
     (let* ((db (conf-value '(database master)))
  	  (host (conf-value 'host db))
            (port (conf-value 'port db))
            (dbname (conf-value 'database db))
            (u (conf-value 'username db))
            (p (conf-value 'password db)))
       (sql-connect postgresql-connect host: host port: port user: u passwd: p db: dbname)))


  (def (authenticate username password)
    (def db (database-connect))
    (let (res (car (sql-eval-query db "SELECT login.login_user($1, $2)"
  				 username password)))
      (sql-close db)
      (if (not res) res
  	(call-with-input-string res read-json))))
      
    
#+end_src

* Configuration

The config for the old version, and therefore our version, is stored
in =~/.ecm/json=.

#+begin_src scheme :tangle login/conf.ss
  (import :std/text/json)
  (export #t)

  (def conf #f)

  (def (update-conf (fname "~/.ecm/ecm.json"))
    (set! conf (call-with-input-file fname read-json)))

  (def (conf-value key (conf conf) reload: (r? #f))
    (def rest [])
    (when (list? key) (set! rest (cdr key)) (set! key (car key))) 
    (when (or (not conf) r?) (update-conf))
    (let ((res (hash-ref conf key (void))))
      (if (and (not (null? rest)) (hash-table? res))
        (conf-value rest res)
        res)))

#+end_src

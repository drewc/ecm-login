#+TITLE: ECM User: Users and Login for a webapp

The idea is that an application has users. This is the meeting spot
for all ECM application and system pieces that (hopefully) cover the
needs.  Backwards compatible!

* Contents
:PROPERTIES:
:TOC:      :include siblings :depth 3 :ignore (this)
:END:
:CONTENTS:
- [[#the-user-abstraction][The User abstraction]]
- [[#the-login-server][The Login server]]
- [[#hacking][HACKING]]
- [[#database][Database]]
- [[#build][Build]]
- [[#package][Package]]
- [[#configuration][Configuration]]
:END:


* The =User= abstraction
:PROPERTIES:
:CUSTOM_ID: the-user-abstraction
:END:

In general all users are, well, users. So the supertype of user, which
is not a superuser but a superclass as it were, is outlined [[file:User.org][Here]]

* The =Login= server
:PROPERTIES:
:CUSTOM_ID: the-login-server
:END:

The idea is to keep it all in [[file:Login.org][one place.]]

* Configuration
:PROPERTIES:
:CUSTOM_ID: configuration
:END:

The config for the old version, and therefore our version, is stored
in =~/.ecm/json=.

#+begin_src scheme :tangle login/conf.ss
  (import :std/text/json)
  (export #t)

  (def conf #f)

  (def (update-conf (fname "~/.ecm/ecm.json"))
    (set! conf (call-with-input-file fname read-json)))

  (def (conf-value key (conf conf) reload: (r? #f))
    (def rest [])
    (when (list? key) (set! rest (cdr key)) (set! key (car key))) 
    (when (or (not conf) r?) (update-conf))
    (let ((res (hash-ref conf key (void))))
      (if (and (not (null? rest)) (hash-table? res))
        (conf-value rest res)
        res)))

#+end_src


* Database
:PROPERTIES:
:CUSTOM_ID: database
:END:

There are many ways in which the interaction with the database is
driven by users and it matters to the database!

Because of that there's [[file:Database.org][a lot dedicated.]]


* Build
:PROPERTIES:
:CUSTOM_ID: build
:END:

#+begin_src scheme :tangle ./build.ss :shebang #!/usr/bin/env gxi
    ;; -*- Gerbil -*-

    (import :std/build-script)

    (defbuild-script
      '("login/conf"
        "login/database"
        "login/types"
        "login/api"
        "login/handler"
        "login/reset-password"
         (exe: "login")
        "user/database/interface"
        "user/database/pool"
        "user/database"
        "user/entity"
  ))
#+end_src

* Package
:PROPERTIES:
:CUSTOM_ID: package
:END:

#+begin_src scheme :tangle gerbil.pkg
     (package: ecm
      ;; depend: ("github.com/drewc/ftw")
     )

#+end_src

* HACKING
:PROPERTIES:
:CUSTOM_ID: hacking
:END:

#+begin_src scheme
  (begin
    (import :ecm/login/handler
            :ecm/login/conf
            :ecm/login/reset-password
  	  :ecm/login/database :std/net/httpd :std/contract :std/net/httpd/mux)
  (import
    :std/pregexp :std/net/smtp :std/net/httpd/mux :std/net/httpd :std/net/uri
    :std/contract :std/text/json :std/misc/ports :std/text/utf8
    :ecm/login/database :ecm/login/handler)
  (update-conf) (create-reset-token "me+ecm@drewc.ca"))



  (def server (run-login-server "0.0.0.0:8080"))
#+end_src

